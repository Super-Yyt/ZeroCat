// 加载外部资源
const loadScript = (src, callback) => {
  const script = document.createElement("script");
  script.src = src;
  script.onload = callback;
  document.head.appendChild(script);
};

const loadStyle = (href) => {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = href;
  document.head.appendChild(link);
};

const ZCFrontend = localStorage.getItem("ZeroCat_ZCFrontend") || "<%= global.config['urls.frontend'] %>";
const ZCApiHost = localStorage.getItem("ZeroCat_ZCApiHost") || "<%= global.config['urls.backend'] %>";

loadStyle(`${ZCFrontend}/scratchtool/mdui.css`);

loadScript(`${ZCFrontend}/scratchtool/jquery.3.7.1.js`, () => {
  loadScript(`${ZCFrontend}/scratchtool/mdui.global.js`, () => {
    // 确保 $ 和 mdui 加载成功后执行初始化
    $(document).ready(() => {
      initialize();
    });
  });
});

// Description: ZeroCat Scratch Tool
let zcvm, zcgui;
let _pid = 0;
let logText, zctab, userinfo = {}, projectjson = "null", projectinfo = {};
let commitInfo = {};
let commituser = {};
let authorinfocard = {};
let authorinfoavatar = {};
const buttons = [
  { id: "open-zerocat-tab", text: "信息", onclick: () => updateZerocatTab() },
  { id: "save-button", text: "保存", onclick: () => openCommitDialog() },
];

function getQueryStringParameter(name) {
  return new URL(window.location.href).searchParams.get(name);
}

function getCurrentTime() {
  const now = new Date();
  return `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
}

function showSnackbar(text) {
  mdui.snackbar({ message: text, closeable: true });
}

// JWT 解析函数
function jwtDecode(token) {
  function b64DecodeUnicode(str) {
    return decodeURIComponent(
      atob(str).replace(/(.)/g, (m, p) => {
        let code = p.charCodeAt(0).toString(16).toUpperCase();
        if (code.length < 2) {
          code = "0" + code;
        }
        return "%" + code;
      })
    );
  }

  function base64UrlDecode(str) {
    let output = str.replace(/-/g, "+").replace(/_/g, "/");
    switch (output.length % 4) {
      case 0:
        break;
      case 2:
        output += "==";
        break;
      case 3:
        output += "=";
        break;
      default:
        throw new Error("base64 string is not of the correct length");
    }
    try {
      return b64DecodeUnicode(output);
    } catch (err) {
      return atob(output);
    }
  }

  if (typeof token !== "string") {
    throw new Error("Invalid token specified: must be a string");
  }

  const part = token.split(".")[1];
  if (typeof part !== "string") {
    throw new Error(`Invalid token specified: missing part #2`);
  }

  let decoded;
  try {
    decoded = base64UrlDecode(part);
  } catch (e) {
    throw new Error(`Invalid token specified: invalid base64 for part #2 (${e.message})`);
  }

  try {
    return JSON.parse(decoded);
  } catch (e) {
    throw new Error(`Invalid token specified: invalid json for part #2 (${e.message})`);
  }
}

function handleInvalidLogin(message) {
  localStorage.removeItem("token");
  mdui.alert({
    headline: "登录问题",
    description: message,
    confirmText: "打开用户页面",
    cancelText: "取消",
    onConfirm: () => {
      window.location.href = `${ZCFrontend}/account/login`;
    },
  });
  showLoginButton();
}

function loadUserInfo() {
  const token = localStorage.getItem("token");
  if (token) {
    try {
      const decoded = jwtDecode(token);
      const currentTime = Math.floor(Date.now() / 1000);
      if (decoded.exp && decoded.exp < currentTime) {
        handleInvalidLogin("登录已过期，请重新登录。");
      } else {
        userinfo = decoded;
        localStorage.setItem("zc:id", String(decoded.userid));
        localStorage.setItem("zc:username", decoded.display_name);
      }
    } catch (error) {
      handleInvalidLogin("登录信息无效，请重新登录。");
    }
  } else {
    showLoginButton();
  }
}

function showLoginButton() {
  buttons.length = 0; // 清空按钮数组
  buttons.push({
    id: "login-button",
    text: "登录/注册",
    onclick: () => (window.location.href = `${ZCFrontend}/account/login`),
  });
  renderButtons();
}

function renderButtons() {
  const zerocatool = document.getElementById("zerocatool");
  zerocatool.innerHTML = ""; // 清空现有按钮
  buttons.forEach((button) => {
    const btnTemplate = zerocatool.cloneNode(true);
    btnTemplate.id = button.id;
    btnTemplate.innerHTML = button.text;
    if (button.onclick) btnTemplate.onclick = button.onclick;
    btnTemplate.style.display = "inline-block";
    zerocatool.parentNode.appendChild(btnTemplate);
  });
  zerocatool.style.display = "none";
}

function setButton(id, text, onclick) {
  const button = document.getElementById(id);
  if (button) {
    button.innerText = text;
    button.onclick = onclick;
  }
}

function uploadProjectAssets() {
  $.each(zcvm.assets, function (index, asset) {
    if (!asset.clean) {
      const formData = new FormData();
      formData.append(
        "file",
        new Blob([asset.data], { type: asset.assetType.contentType }),
        `${asset.assetId}.${asset.dataFormat}`
      );

      $.ajax({
        url: `${ZCApiHost}/scratch/assets/${asset.assetId}.${asset.dataFormat}?token=${localStorage.getItem("token")}`,
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        success: function () {
          logText.innerText += `[${getCurrentTime()}]文件上传成功${asset.assetId}.${asset.dataFormat}\n`;
          asset.clean = true;
        },
        error: function (xhr, status, error) {
          if (xhr.responseJSON && xhr.responseJSON.code === "AUTH_ERROR_LOGIN") {
            handleInvalidLogin(xhr.responseJSON.message);
          } else {
            logText.innerText += `[${getCurrentTime()}]文件上传失败${asset.assetId}.${asset.dataFormat}\nerror:${error}\n`;
          }
        },
      });
    } else {
      logText.innerText += `[${getCurrentTime()}]文件未修改${asset.assetId}.${asset.dataFormat}\n`;
    }
  });
  showSnackbar("媒体库保存完成");
}

function fetchProjectInfo() {
  if (_pid !== 0 && Number.isInteger(_pid)) {
    $.ajax({
      url: `${ZCApiHost}/scratch/projectinfo2?id=${_pid}`,
      type: "GET",
      data: { token: localStorage.getItem("token") },
      success: function (result) {
        if (result.status == "404") {
          location.href = `${ZCFrontend}/editor.html?msg=404`;
          return;
        }
        projectinfo = result;
        authorinfocard.headline = result.author.username;
        authorinfocard.description = result.author.description;
        authorinfocard.onclick = () => window.open(`${ZCFrontend}/user/${result.author.id}`);
        authorinfocard.style.cursor = "pointer";
        authorinfoavatar.src = "https://s4-1.wuyuan.1r.ink/user/" + result.author.profile.id;
        zctab.headline = `${result.title} #${result.id}`;
        zctab.description = `${String(result.author.id) === String(userinfo.userid) ? "是你的作品" : "不是你的作品"}`;

        if (String(result.author.id) !== String(userinfo.userid)) {
          setButton("push-button", "改编", () => window.open(`${ZCFrontend}/projects/${_pid}/fork`));
        }
      },
      error: function (xhr) {
        const data = xhr.responseJSON;
        if (data && data.code === "AUTH_ERROR_LOGIN") {
          handleInvalidLogin(data.message);
        } else {
          alert(xhr);
        }
      },
    });
  }
}

function updateZerocatTab() {
  zctab.open = true;
}

function getZerocatUserInfo(userid) {
  let result;
  $.ajax({
    url: `${ZCApiHost}/api/getuserinfo?id=${userid}`,
    type: "GET",
    data: { token: localStorage.getItem("token") },
    async: false,
    success: function (data) {
      result = data.info.user;
    },
    error: function (xhr) {
      const data = xhr.responseJSON;
      if (data && data.code === "AUTH_ERROR_LOGIN") {
        handleInvalidLogin(data.message);
      } else {
        alert(xhr);
      }
    },
  });
  return result;
}

function initialize() {
  if (window.initialized) return; // 避免初始化两次
  window.initialized = true;

  const zerocatTabHTML = `
    <mdui-dialog headline="作品" description="加载中" close-on-overlay-click id="zerocat-tab">
      <mdui-list>
        <mdui-list-subheader>作者</mdui-list-subheader>
        <mdui-list-item headline="作者信息" description="加载中" id="author-info" active rounded>
          <mdui-avatar slot="icon" src="" id="author-avatar"></mdui-avatar>
        </mdui-list-item>
        <mdui-list-subheader>当前提交</mdui-list-subheader>
        <mdui-list-item headline="提交信息" description="Supporting text" id="commit-info" rounded>
          <mdui-avatar slot="icon" src="" id="commit-avatar"></mdui-avatar>
        </mdui-list-item>
      </mdui-list>
      <br/>
      <mdui-button id="savestatic" onclick="uploadProjectAssets()">保存媒体库</mdui-button>
      <mdui-button onclick="openCommitDialog()">保存作品</mdui-button>
      <mdui-button onclick="logText.innerText = ''">清空log</mdui-button>
      <div id="log-text"></div>
    </mdui-dialog>
  `;
  document.body.insertAdjacentHTML("beforeend", zerocatTabHTML);

  // 添加HTML创建提示框
  document.body.insertAdjacentHTML(
    "beforeend",
    `
    <mdui-dialog
      headline="加载中"
      description="正在加载作品，请稍候..."
      close-on-overlay-click
      class="loading-dialog"
    ></mdui-dialog>
    <mdui-dialog headline="提交作品" description="请输入提交信息" close-on-overlay-click id="commit-dialog">
    <mdui-text-field variant="outlined" label="提交信息" value="Update Project" id="commit-message"></mdui-text-field>
    <mdui-text-field variant="outlined" label="更多信息" rows ></mdui-text-field>
<mdui-radio-group value="main">
  <mdui-radio value="main">提交给当前分支</mdui-radio>
  <mdui-radio value="pr">为此提交创建一个新分支</mdui-radio>
</mdui-radio-group>
    <mdui-text-field variant="outlined" label="分支名称" value="main" id="branch-name"></mdui-text-field>
      <mdui-button onclick="commitProject()">提交</mdui-button>
    </mdui-dialog>
  `
  );

  const loadingDialog = document.querySelector(".loading-dialog");

  if (typeof ClipCCExtension !== "undefined") {
    zcvm = ClipCCExtension.api.getVmInstance();
    //zcgui = ClipCCExtension.api.getGuiInstance();
  } else if (typeof window.vm !== "undefined") {
    zcvm = vm;
  } else {
    setTimeout(initialize, 100);
    return;
  }

  const msg = getQueryStringParameter("msg");
  if (msg) {
    if (msg == "404") alert("作品不存在");
    if (msg == "401") alert("未登录");
  }

  zctab = document.querySelector("#zerocat-tab");
  authorinfocard = document.querySelector("#author-info");
  authorinfoavatar = document.querySelector("#author-avatar");
  logText = document.querySelector("#log-text");

  loadUserInfo();
  renderButtons();
  load();
}

window.onload = () => {
  initialize();
};

function zctabopen() {
  updateZerocatTab();
}

function forkdialogopen() {
  forkdialog.open = true;
}

function setinfotabopen() {
  setinfotab.open = true;
}

function pushdialogopen() {
  pushdialog.open = true;
}

let isLoading = false;

function load() {
  if (isLoading) return;
  isLoading = true;

  console.log("Loading project...");
  const queryId = getQueryStringParameter("id");
  if (queryId) {
    _pid = Number(queryId);
    console.log(`Project ID from query: ${_pid}`);
  }
  if (_pid === 0) {
    console.log("No project ID found, redirecting to new project page.");
    //window.location.href = `${ZCApiHost}/newproject`;
    return;
  }
  if (_pid !== 0) {
    console.log(`Fetching project info for ID: ${_pid}`);
    fetchProjectInfo();
    if (zcvm) {
      downloadAndLoadProject(_pid);
    } else {
      setTimeout(load, 100);
    }
  }
}

function downloadAndLoadProject(pid) {
  console.log(`Downloading project with ID: ${pid}`);
  const loadingDialog = document.querySelector(".loading-dialog");
  loadingDialog.open = true;

  const branch = getQueryStringParameter("branch") || "main";
  const ref = getQueryStringParameter("ref") || "latest";

  $.ajax({
    url: `${ZCApiHost}/project/${pid}/${branch}/${ref}`,
    type: "GET",
    data: { token: localStorage.getItem("token") },
    success: function (response) {
      if (response.status === "error") {
        mdui.alert({
          headline: "加载失败",
          description: response.message,
          confirmText: "关闭",
        });
        loadingDialog.open = false;
        isLoading = false;
        return;
      }

      const { commit, accessFileToken } = response;
      commitInfo = commit;
      const commitDate = new Date(commitInfo.commit_date).toLocaleString();
      const commitInfoList = document.getElementById("commit-info");
      commitInfoList.headline = commitInfo.commit_message;
      const commitInfoAvatar = document.getElementById("commit-avatar");
      commituser = getZerocatUserInfo(commitInfo.author_id);
      commitInfoAvatar.src = "https://s4-1.wuyuan.1r.ink/user/" + commituser.images;
      commitInfoList.description = `${commituser.display_name} 于 ${commitDate}`;

      $.ajax({
        url: `${ZCApiHost}/project/files/${commit.commit_file}`,
        type: "GET",
        data: { accessFileToken, token: localStorage.getItem("token") },
        success: function (fileResponse) {
          zcvm
            .loadProject(JSON.parse(fileResponse.file.source))
            .then(() => {
              console.log("Project loaded into VM successfully.");
              setTimeout(() => {
                loadingDialog.open = false;
              }, 10);
              isLoading = false;
            })
            .catch((err) => {
              console.error("Error loading project into VM:", err);
              loadingDialog.open = false;
              isLoading = false;
              mdui.alert({
                headline: "加载失败",
                description: `作品加载失败: ${err.message}`,
                confirmText: "重新加载",
                onConfirm: () => {
                  window.location.reload();
                },
              });
            });
        },
        error: function (xhr) {
          console.error("Error fetching project file:", xhr);
          loadingDialog.open = false;
          isLoading = false;
          mdui.alert({
            headline: "加载失败",
            description: `作品加载失败: ${xhr.responseText}`,
            confirmText: "重新加载",
            onConfirm: () => {
              window.location.reload();
            },
          });
        },
      });
    },
    error: function (xhr) {
      const data = xhr.responseJSON;
      if (data && data.code === "AUTH_ERROR_LOGIN") {
        handleInvalidLogin(data.message);
      } else {
        console.error("Error downloading project data:", xhr);
        loadingDialog.open = false;
        isLoading = false;
        mdui.alert({
          headline: "加载失败",
          description: `作品加载失败: ${xhr.responseText}`,
          confirmText: "重新加载",
          onConfirm: () => {
            window.location.reload();
          },
        });
      }
    },
  });
}

function saveProject({ force = false } = {}) {
  setButton("save-button", "保存中", () => openCommitDialog());
  uploadProjectAssets();
  if (force) {
    showSnackbar("强制保存");
    commitProject();
  }
  if (zcvm.runtime.isRunning) {
    zcvm.runtime.stopAll();
  }
  if (projectjson == zcvm.toJSON()) {
    showSnackbar("作品未修改");
    setButton("save-button", "保存", () => openCommitDialog());
    return;
  }
  if (String(projectinfo.author.id) !== String(userinfo.userid)) {
    showSnackbar("无权限");
    setButton("save-button", "无权限", () => openCommitDialog());
    return;
  }
  projectjson = zcvm.toJSON();
  commitProject();
  showSnackbar("保存完成");
  setButton("save-button", "保存完成", () => openCommitDialog());

  logText.innerText += `[${getCurrentTime()}]保存完成\n`;
}

function openBase64ImageInNewTab() {
  if (!zcvm) return;
  zcvm.renderer.requestSnapshot((dataURI) => {
    const imgWindow = window.open("", "_blank");
    imgWindow.document.write('<img src="' + dataURI + '" />');
  });
}

function setProjectThumbnail() {
  if (!zcvm) return;
  zcvm.renderer.requestSnapshot(async (dataURI) => {
    try {
      const blob = await (await fetch(dataURI)).blob();
      const formData = new FormData();
      formData.append("file", blob, "thumbnail.png");

      const response = await fetch(`${ZCApiHost}/scratch/thumbnail/${_pid}`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
        body: formData,
      });

      const data = await response.json();
      if (data.code === "AUTH_ERROR_LOGIN") {
        handleInvalidLogin(data.message);
      } else if (response.ok) {
        showSnackbar("封面设置成功");
      } else {
        showSnackbar("封面设置失败");
      }
    } catch (error) {
      console.error("Error setting project thumbnail:", error);
      showSnackbar("封面设置失败");
    }
  });
}

buttons.push({
  id: "set-thumbnail-button",
  text: "舞台截图设为封面",
  onclick: () => setProjectThumbnail(),
});

function openCommitDialog() {
  const commitDialog = document.getElementById("commit-dialog");
  const branchNameInput = document.getElementById("branch-name");
  const branchRadioGroup = document.querySelector('mdui-radio-group');

  const currentBranch = getQueryStringParameter("branch") || "main";
  branchNameInput.value = currentBranch;

  branchRadioGroup.addEventListener('change', (event) => {
    if (event.target.value === 'pr') {
      const username = userinfo.username;
      const timestamp = Date.now();
      branchNameInput.value = `${username}-patch-${timestamp}`;
      branchNameInput.disabled = false;
    } else {
      branchNameInput.value = currentBranch;
      branchNameInput.disabled = true;
    }
  });

  commitDialog.open = true;
}

function commitProject() {
  const branchName = document.getElementById("branch-name").value;
  const commitMessage = document.getElementById("commit-message").value;

  if (!commitMessage) {
    mdui.alert({
      headline: "提交信息不能为空",
      confirmText: "关闭",
    });
    return;
  }

  setButton("save-button", "保存中", () => openCommitDialog());

  uploadProjectAssets();

  if (zcvm.runtime.isRunning) {
    zcvm.runtime.stopAll();
  }

  if (projectjson == zcvm.toJSON()) {
    showSnackbar("作品未修改");
    setButton("save-button", "保存", () => openCommitDialog());
    return;
  }

  if (String(projectinfo.author.id) !== String(userinfo.userid)) {
    showSnackbar("无权限");
    setButton("save-button", "无权限", () => openCommitDialog());
    return;
  }

  projectjson = zcvm.toJSON();

  // 先调用文件保存接口
  $.ajax({
    url: `${ZCApiHost}/project/savefile`,
    type: "post",
    data: projectjson,
    contentType: "application/json",
    headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
    success: function (saveResponse) {
      const newAccessFileToken = saveResponse.accessFileToken;

      // 然后调用提交接口
      $.ajax({
        url: `${ZCApiHost}/project/commit/${_pid}`,
        type: "put",
        data: JSON.stringify({
          projectid: _pid,
          branch: branchName,
          accessFileToken: newAccessFileToken,
          message: commitMessage,
        }),
        contentType: "application/json",
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        success: function (commitResponse) {
          showSnackbar("提交成功");
          document.getElementById("commit-dialog").open=false;
          setButton("save-button", "保存完成", () => openCommitDialog());
          logText.innerText += `[${getCurrentTime()}]保存完成\n`;

          // 修改或添加 URL query 部分的 branch
          const url = new URL(window.location.href);
          url.searchParams.set('branch', branchName);
          window.history.replaceState({}, '', url);

        },
        error: function (xhr) {
          const data = xhr.responseJSON;
          if (data && data.code === "AUTH_ERROR_LOGIN") {
            handleInvalidLogin(data.message);
          } else {
            console.log(xhr);
            mdui.alert({
              headline: "提交作品出错",
              description: JSON.stringify(xhr),
              confirmText: "关闭",
            });
          }
        },
      });
    },
    error: function (xhr) {
      const data = xhr.responseJSON;
      if (data && data.code === "AUTH_ERROR_LOGIN") {
        handleInvalidLogin(data.message);
      } else {
        console.log(xhr);
        mdui.alert({
          headline: "保存文件出错",
          description: JSON.stringify(xhr),
          confirmText: "关闭",
        });
      }
    },
  });
}
